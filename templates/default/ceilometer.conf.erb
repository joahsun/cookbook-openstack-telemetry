[DEFAULT]
os_auth_url = <%= @identity_endpoint %>
os_tenant_name = <%= @service_tenant_name %>
os_password = <%= @service_pass %>
os_username = <%= @service_user %>
policy_file = /etc/ceilometer/policy.json
verbose = <%= node["openstack"]["telemetry"]["verbose"] %>
debug = <%= node["openstack"]["telemetry"]["debug"] %>
<% if node["openstack"]["telemetry"]["hypervisor_inspector"] %>
hypervisor_inspector = <%= node["openstack"]["telemetry"]["hypervisor_inspector"] %>
<% end %>
<% if node["openstack"]["telemetry"]["syslog"]["use"] %>
log_config = /etc/openstack/logging.conf
<% end %>
sample_source = <%= node["openstack"]["telemetry"]["sample_source"] %>

##### AMQP #####
notification_topics = notifications,glance_notifications

glance_registry_host = <%= @image_endpoint.host %>
periodic_interval = <%= node["openstack"]["telemetry"]["periodic_interval"] %>

[database]
connection=<%= @database_connection %>
time_to_live=<%= node["openstack"]["telemetry"]["database"]["time_to_live"] %>

[api]
host = <%= @api_bind_host %>
port = <%= @api_bind_port %>

[keystone_authtoken]
auth_uri = <%= @auth_uri %>
identity_uri = <%= @identity_uri %>
<% if node['openstack']['telemetry']['api']['auth']['version'] != 'v2.0' %>
auth_version = <%= node['openstack']['telemetry']['api']['auth']['version'] %>
<% end %>
admin_tenant_name = <%= @service_tenant_name %>
admin_user = <%= @service_user %>
admin_password = <%= @service_pass %>
signing_dir = <%= node["openstack"]["telemetry"]["api"]["auth"]["cache_dir"] %>

# A list of memcached server(s) to use for caching.
<% if node['openstack']['telemetry']['api']['auth']['memcached_servers'] %>
memcached_servers = <%= node['openstack']['telemetry']['api']['auth']['memcached_servers'] %>
<% end %>

# Whether token data should be authenticated or authenticated and encrypted. Acceptable values are MAC or ENCRYPT.
<% if node['openstack']['telemetry']['api']['auth']['memcache_security_strategy'] %>
memcache_security_strategy = <%= node['openstack']['telemetry']['api']['auth']['memcache_security_strategy'] %>
<% end %>

# This string is used for key derivation.
<% if node['openstack']['telemetry']['api']['auth']['memcache_secret_key'] %>
memcache_secret_key = <%= node['openstack']['telemetry']['api']['auth']['memcache_secret_key'] %>
<% end %>

# Hash algorithms to use for hashing PKI tokens.
hash_algorithms = <%= node['openstack']['telemetry']['api']['auth']['hash_algorithms'] %>

# A PEM encoded Certificate Authority to use when verifying HTTPs connections.
<% if node['openstack']['telemetry']['api']['auth']['cafile'] %>
cafile = <%= node['openstack']['telemetry']['api']['auth']['cafile'] %>
<% end %>

# Verify HTTPS connections. (boolean value)
insecure = <%= node['openstack']['telemetry']['api']['auth']['insecure'] %>

<% if @mq_service_type == "qpid"  %>
[oslo_messaging_qpid]

#
# From oslo.messaging
#

# Use durable queues in AMQP. (boolean value)
amqp_durable_queues=<%= node["openstack"]["mq"]["telemetry"]["durable_queues"] %>

# Auto-delete queues in AMQP. (boolean value)
amqp_auto_delete=<%= node["openstack"]["mq"]["telemetry"]["auto_delete"] %>

##### QPID #####
rpc_backend=ceilometer.openstack.common.rpc.impl_qpid
qpid_hostname=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["host"] %>
qpid_port=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["port"] %>
qpid_password=<%= @mq_password %>
qpid_username=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["username"] %>
qpid_sasl_mechanisms=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["sasl_mechanisms"] %>
qpid_reconnect=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["reconnect"] %>
qpid_reconnect_timeout=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["reconnect_timeout"] %>
qpid_reconnect_limit=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["reconnect_limit"] %>
qpid_reconnect_interval_min=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["reconnect_interval_min"] %>
qpid_reconnect_interval_max=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["reconnect_interval_max"] %>
qpid_reconnect_interval=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["reconnect_interval"] %>
qpid_heartbeat=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["heartbeat"] %>
# qpid protocol. default 'tcp'. set to 'ssl' to enable SSL
qpid_protocol=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["protocol"] %>
qpid_tcp_nodelay=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["tcp_nodelay"] %>
qpid_topology_version=<%= node["openstack"]["mq"]["telemetry"]["qpid"]["topology_version"] %>
<% end %>

<% if @mq_service_type == "rabbitmq"  %>
[oslo_messaging_rabbit]

#
# From oslo.messaging
#

# Number of seconds after which the Rabbit broker is considered down if heartbeat's keep-alive fails (0 disable the heartbeat)
heartbeat_timeout_threshold=<%= node['openstack']['mq']['telemetry']['rabbit']['heartbeat_timeout_threshold'] %>

# How often times during the heartbeat_timeout_threshold we check the heartbeat
heartbeat_rate=<%= node['openstack']['mq']['telemetry']['rabbit']['heartbeat_rate'] %>

# Use durable queues in AMQP. (boolean value)
amqp_durable_queues=<%= node["openstack"]["mq"]["telemetry"]["durable_queues"] %>

# Auto-delete queues in AMQP. (boolean value)
amqp_auto_delete=<%= node["openstack"]["mq"]["telemetry"]["auto_delete"] %>

<% if node['openstack']['mq']['telemetry']['rabbit']['use_ssl'] -%>

# Connect over SSL for RabbitMQ. (boolean value)
rabbit_use_ssl=true

<%   if node['openstack']['mq']['telemetry']['rabbit']['kombu_ssl_version'] -%>
# SSL version to use (valid only if SSL enabled). valid values
# are TLSv1 and SSLv23. SSLv2 and SSLv3 may be available on
# some distributions. (string value)
kombu_ssl_version=<%= node['openstack']['mq']['telemetry']['rabbit']['kombu_ssl_version'] %>
<%   end -%>
<%   if node['openstack']['mq']['telemetry']['rabbit']['kombu_ssl_keyfile'] -%>
# SSL key file (valid only if SSL enabled)
kombu_ssl_keyfile=<%= node['openstack']['mq']['telemetry']['rabbit']['kombu_ssl_keyfile'] %>
<%   end -%>
<%   if node['openstack']['mq']['telemetry']['rabbit']['kombu_ssl_certfile'] -%>
# SSL cert file (valid only if SSL enabled)
kombu_ssl_certfile=<%= node['openstack']['mq']['telemetry']['rabbit']['kombu_ssl_certfile'] %>
<%   end -%>
<%   if node['openstack']['mq']['telemetry']['rabbit']['kombu_ssl_ca_certs'] -%>
# SSL certification authority file (valid only if SSL enabled)
kombu_ssl_ca_certs=<%= node['openstack']['mq']['telemetry']['rabbit']['kombu_ssl_ca_certs'] %>
<%   end -%>
# How long to wait before reconnecting in response to an AMQP consumer cancel notification
kombu_reconnect_delay=<%= node['openstack']['mq']['telemetry']['rabbit']['kombu_reconnect_delay'] %>
# How long to wait before considering a reconnect attempt to have failed.
# This value should not be longer than rpc_response_timeout
kombu_reconnect_timeout=<%= node['openstack']['mq']['telemetry']['rabbit']['kombu_reconnect_timeout'] %>
<% end -%>

##### RABBITMQ #####
rabbit_userid = <%= node["openstack"]["mq"]["telemetry"]["rabbit"]["userid"] %>
rabbit_password = <%= @mq_password %>
<% if node["openstack"]["mq"]["telemetry"]["rabbit"]["ha"] %>
rabbit_hosts = <%= @rabbit_hosts %>
rabbit_ha_queues = True
<% else %>
rabbit_port = <%= node["openstack"]["mq"]["telemetry"]["rabbit"]["port"] %>
rabbit_host = <%= node["openstack"]["mq"]["telemetry"]["rabbit"]["host"] %>
<% end %>
rabbit_virtual_host = <%= node["openstack"]["mq"]["telemetry"]["rabbit"]["vhost"] %>
rpc_backend = ceilometer.openstack.common.rpc.impl_kombu

# Maximum retries with trying to connect to RabbitMQ
# (the default of 0 implies an infinite retry count)
rabbit_max_retries = <%= node["openstack"]["mq"]["telemetry"]["rabbit"]["rabbit_max_retries"] %>

# RabbitMQ connection retry interval
rabbit_retry_interval = <%= node["openstack"]["mq"]["telemetry"]["rabbit"]["rabbit_retry_interval"] %>
<% end %>

[publisher_rpc]
metering_secret = <%= @metering_secret %>

<% if node["openstack"]["telemetry"]["hypervisor_inspector"] == 'vsphere'%>
[vmware]
host_ip = <%= node['openstack']['compute']['vmware']['host_ip'] %>
host_username = <%= node['openstack']['compute']['vmware']['host_username'] %>
host_password = <%= @vmware_host_pass %>
task_poll_interval = <%= node['openstack']['compute']['vmware']['task_poll_interval'] %>
api_retry_count = <%= node['openstack']['compute']['vmware']['api_retry_count'] %>
  <% if node['openstack']['compute']['vmware']['wsdl_location'] %>
wsdl_location = <%= node['openstack']['compute']['vmware']['wsdl_location'] %>
  <% end %>
<% end %>

[service_credentials]
os_region_name = <%= node['openstack']['telemetry']['region'] %>

# A PEM encoded Certificate Authority to use when verifying HTTPs connections. (for service polling authentication)
<% if node['openstack']['telemetry']['service-credentials']['cafile'] %>
os_cacert = <%= node['openstack']['telemetry']['service-credentials']['cafile'] %>
<% end %>

# Type of endpoint in Identity service catalog to use for
# communication with OpenStack services. (string value)
os_endpoint_type = <%= node['openstack']['telemetry']['service-credentials']['os_endpoint_type'] %>

# Verify HTTPS connections. (boolean value, for service polling authentication)
insecure = <%= node['openstack']['telemetry']['service-credentials']['insecure'] %>

[notification]
store_events = <%= node['openstack']['telemetry']['notification']['store_events'] %>
